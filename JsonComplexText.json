{"documents":{"doc41":" The table is dynamically expanded when there are too many collisions (i.e., keys that have distinct hash codes but fall into the same slot modulo the table size), with the expected average effect of maintaining roughly two bins per mapping (corresponding to a 0.75 load factor threshold for resizing). There may be much variance around this average as mappings are added and removed, but overall, this maintains a commonly accepted time\/space tradeoff for hash tables. However, resizing this or any other kind of hash table may be a relatively slow operation. When possible, it is a good idea to provide a size estimate as an optional initialCapacity constructor argument. An additional optional loadFactor constructor argument provides a further means of customizing initial table capacity by specifying the table density to be used in calculating the amount of space to allocate for the given number of elements. Also, for compatibility with previous versions of this class, constructors may optionally specify an expected concurrencyLevel as an additional hint for internal sizing. Note that using many keys with exactly the same hashCode() is a sure way to slow down performance of any hash table. To ameliorate impact, when keys are Comparable, this class may use comparison order among keys to help break ties.","doc40":" Retrieval operations (including get) generally do not block, so may overlap with update operations (including put and remove). Retrievals reflect the results of the most recently completed update operations holding upon their onset. (More formally, an update operation for a given key bears a happens-before relation with any (non-null) retrieval for that key reporting the updated value.) For aggregate operations such as putAll and clear, concurrent retrievals may reflect insertion or removal of only some entries. Similarly, Iterators, Spliterators and Enumerations return elements reflecting the state of the hash table at some point at or since the creation of the iterator\/enumeration. They do not throw ConcurrentModificationException. However, iterators are designed to be used by only one thread at a time. Bear in mind that the results of aggregate status methods including size, isEmpty, and containsValue are typically useful only when a map is not undergoing concurrent updates in other threads. Otherwise the results of these methods reflect transient states that may be adequate for monitoring or estimation purposes, but not for program control.","doc43":" A ConcurrentHashMap can be used as scalable frequency map (a form of histogram or multiset) by using LongAdder values and initializing via computeIfAbsent. For example, to add a count to a ConcurrentHashMap<String,LongAdder> freqs, you can use freqs.computeIfAbsent(k -> new LongAdder()).increment();","doc42":" A Set projection of a ConcurrentHashMap may be created (using newKeySet() or newKeySet(int)), or viewed (using keySet(Object) when only keys are of interest, and the mapped values are (perhaps transiently) not used or all take the same mapping value.","doc49":" reduce: Accumulate each element. The supplied reduction function cannot rely on ordering (more formally, it should be both associative and commutative). There are five variants:","doc48":" search: Return the first available non-null result of applying a given function on each element; skipping further search when a result is found.","doc639":" Returns:","doc637":" public long mappingCount()","doc45":" Like Hashtable but unlike HashMap, this class does not allow null to be used as a key or value.","doc879":" Parameters:","doc638":" Returns the number of mappings. This method should be used instead of size() because a ConcurrentHashMap may contain more mappings than can be represented as an int. The value returned is an estimate; the actual count may differ if there are concurrent insertions or removals.","doc44":" This class and its views and iterators implement all of the optional methods of the Map and Iterator interfaces.","doc635":" values()","doc47":" forEach: Perform a given action on each element. A variant form applies a given transformation on each element before performing the action.","doc877":" Consumer<? super V> action)","doc636":" mappingCount","doc46":" ConcurrentHashMaps support a set of sequential and parallel bulk operations that, unlike most Stream methods, are designed to be safely, and often sensibly, applied even with maps that are being concurrently updated by other threads; for example, when computing a snapshot summary of the values in a shared registry. There are three kinds of operation, each with four forms, accepting functions with Keys, Values, Entries, and (Key, Value) arguments and\/or return values. Because the elements of a ConcurrentHashMap are not ordered in any particular way, and may be processed in different orders in different parallel executions, the correctness of supplied functions should not depend on any ordering, or on any other objects or values that may transiently change while computation is in progress; and except for forEach actions, should ideally be side-effect-free. Bulk operations on Map.Entry objects do not support method setValue.","doc878":" Performs the given action for each value.","doc644":" public static <K> ConcurrentHashMap.KeySetView<K,Boolean> newKeySet()","doc402":" the hash code value for this map","doc886":" Function<? super V,? extends U> transformer,","doc645":" Creates a new Set backed by a ConcurrentHashMap from the given type to Boolean.TRUE.","doc403":" See Also:","doc887":" Consumer<? super U> action)","doc642":" 1.8","doc400":" hashCode in class AbstractMap<K,V>","doc884":" forEachValue","doc643":" newKeySet","doc401":" Returns:","doc885":" public <U> void forEachValue(long parallelismThreshold,","doc640":" the number of mappings","doc882":" Since:","doc641":" Since:","doc883":" 1.8","doc880":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc881":" action - the action","doc30":" java.util.concurrent.ConcurrentHashMap<K,V>","doc32":" K - the type of keys maintained by this map","doc31":" Type Parameters:","doc38":" implements ConcurrentMap<K,V>, Serializable","doc37":" extends AbstractMap<K,V>","doc628":" keySet()","doc39":" A hash table supporting full concurrency of retrievals and high expected concurrency for updates. This class obeys the same functional specification as Hashtable, and includes versions of methods corresponding to each method of Hashtable. However, even though all operations are thread-safe, retrieval operations do not entail locking, and there is not any support for locking the entire table in a way that prevents all access. This class is fully interoperable with Hashtable in programs that rely on its thread safety but not on its synchronization details.","doc629":" elements","doc626":" an enumeration of the keys in this table","doc34":" All Implemented Interfaces:","doc868":" transformer - a function returning the transformation for an element","doc627":" See Also:","doc33":" V - the type of mapped values","doc869":" basis - the identity (initial default value) for the reduction","doc624":" Returns an enumeration of the keys in this table.","doc36":" public class ConcurrentHashMap<K,V>","doc866":" Parameters:","doc625":" Returns:","doc35":" Serializable, ConcurrentMap<K,V>, Map<K,V>","doc867":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc633":" an enumeration of the values in this table","doc875":" forEachValue","doc634":" See Also:","doc876":" public void forEachValue(long parallelismThreshold,","doc631":" Returns an enumeration of the values in this table.","doc873":" Since:","doc632":" Returns:","doc874":" 1.8","doc871":" Returns:","doc630":" public Enumeration<V> elements()","doc872":" the result of accumulating the given transformation of all keys","doc870":" reducer - a commutative associative combining function","doc63":" See Also:","doc62":" 1.5","doc65":" Nested Class Summary","doc64":" Serialized Form","doc61":" Since:","doc60":" This class is a member of the Java Collections Framework.","doc619":" true if and only if some key maps to the value argument in this table as determined by the equals method; false otherwise","doc617":" value - a value to search for","doc859":" 1.8","doc618":" Returns:","doc615":" Legacy method testing if some key maps into the specified value in this table. This method is identical in functionality to containsValue(Object), and exists solely to ensure full compatibility with class Hashtable, which supported this method prior to introduction of the Java Collections framework.","doc67":" static class \tConcurrentHashMap.KeySetView<K,V>","doc857":" the result of accumulating the given transformation of all keys","doc616":" Parameters:","doc66":" Nested Classes Modifier and Type \tClass and Description","doc858":" Since:","doc613":" contains","doc69":" Nested classes\/interfaces inherited from class java.util.AbstractMap","doc855":" reducer - a commutative associative combining function","doc614":" public boolean contains(Object value)","doc68":" A view of a ConcurrentHashMap as a Set of keys, in which additions may optionally be enabled by mapping to a common value.","doc856":" Returns:","doc622":" keys","doc864":" IntBinaryOperator reducer)","doc623":" public Enumeration<K> keys()","doc865":" Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.","doc620":" Throws:","doc862":" ToIntFunction<? super K> transformer,","doc621":" NullPointerException - if the specified value is null","doc863":" int basis,","doc860":" reduceKeysToInt","doc861":" public int reduceKeysToInt(long parallelismThreshold,","doc52":" Reductions to scalar doubles, longs, and ints, using a given basis value.","doc51":" Mapped reductions that accumulate the results of a given function applied to each element.","doc54":" The concurrency properties of bulk operations follow from those of ConcurrentHashMap: Any non-null result returned from get(key) and related access methods bears a happens-before relation with the associated insertion or update. The result of any bulk operation reflects the composition of these per-element relations (but is not necessarily atomic with respect to the map as a whole unless it is somehow known to be quiescent). Conversely, because keys and values in the map are never null, null serves as a reliable atomic indicator of the current lack of any result. To maintain this property, null serves as an implicit basis for all non-scalar reduction operations. For the double, long, and int versions, the basis should be one that, when combined with any other value, returns that other value (more formally, it should be the identity element for the reduction). Most common reductions have these properties; for example, computing a sum with basis 0 or a minimum with basis MAX_VALUE.","doc53":" These bulk operations accept a parallelismThreshold argument. Methods proceed sequentially if the current map size is estimated to be less than the given threshold. Using a value of Long.MAX_VALUE suppresses all parallelism. Using a value of 1 results in maximal parallelism by partitioning into enough subtasks to fully utilize the ForkJoinPool.commonPool() that is used for all parallel computations. Normally, you would initially choose one of these extreme values, and then measure performance of using in-between values that trade off overhead versus throughput.","doc50":" Plain reductions. (There is not a form of this method for (key, value) function arguments since there is no corresponding return type.)","doc608":" Returns:","doc59":" All arguments to all task methods must be non-null.","doc609":" the new value associated with the specified key, or null if none","doc606":" value - the value to use if absent","doc848":" long basis,","doc607":" remappingFunction - the function to recompute a value if present","doc849":" LongBinaryOperator reducer)","doc604":" Parameters:","doc56":" Methods accepting and\/or returning Entry arguments maintain key-value associations. They may be useful for example when finding the key for the greatest value. Note that \"plain\" Entry arguments can be supplied using new AbstractMap.SimpleEntry(k,v).","doc846":" public long reduceKeysToLong(long parallelismThreshold,","doc605":" key - key with which the specified value is to be associated","doc55":" Search and transformation functions provided as arguments should similarly return null to indicate the lack of any result (in which case it is not used). In the case of mapped reductions, this also enables transformations to serve as filters, returning null (or, in the case of primitive specializations, the identity basis) if the element should not be combined. You can create compound transformations and filterings by composing them yourself under this \"null means there is nothing there now\" rule before using them in search or reduce operations.","doc847":" ToLongFunction<? super K> transformer,","doc602":" Specified by:","doc58":" Speedups for parallel compared to sequential forms are common but not guaranteed. Parallel operations involving brief functions on small maps may execute more slowly than sequential forms if the underlying work to parallelize the computation is more expensive than the computation itself. Similarly, parallelization may not lead to much actual parallelism if all processors are busy performing unrelated tasks.","doc844":" 1.8","doc603":" merge in interface Map<K,V>","doc57":" Bulk operations may complete abruptly, throwing an exception encountered in the application of a supplied function. Bear in mind when handling such exceptions that other concurrently executing functions could also have thrown exceptions, or would have done so if the first exception had not occurred.","doc845":" reduceKeysToLong","doc611":" NullPointerException - if the specified key or the remappingFunction is null","doc853":" transformer - a function returning the transformation for an element","doc612":" RuntimeException - or Error if the remappingFunction does so, in which case the mapping is unchanged","doc854":" basis - the identity (initial default value) for the reduction","doc851":" Parameters:","doc610":" Throws:","doc852":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc850":" Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.","doc839":" basis - the identity (initial default value) for the reduction","doc837":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc838":" transformer - a function returning the transformation for an element","doc835":" Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.","doc836":" Parameters:","doc833":" double basis,","doc834":" DoubleBinaryOperator reducer)","doc600":" Specified by:","doc842":" the result of accumulating the given transformation of all keys","doc601":" merge in interface ConcurrentMap<K,V>","doc843":" Since:","doc840":" reducer - a commutative associative combining function","doc841":" Returns:","doc828":" Since:","doc829":" 1.8","doc826":" Returns:","doc827":" the result of accumulating the given transformation of all keys","doc824":" transformer - a function returning the transformation for an element, or null if there is no transformation (in which case it is not combined)","doc825":" reducer - a commutative associative combining function","doc822":" Parameters:","doc823":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc831":" public double reduceKeysToDouble(long parallelismThreshold,","doc832":" ToDoubleFunction<? super K> transformer,","doc830":" reduceKeysToDouble","doc21":" Detail:","doc20":" Method","doc819":" Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, or null if none.","doc27":"Class ConcurrentHashMap<K,V>","doc817":" Function<? super K,? extends U> transformer,","doc26":"java.util.concurrent","doc818":" BiFunction<? super U,? super U,? extends U> reducer)","doc29":" java.util.AbstractMap<K,V>","doc815":" reduceKeys","doc28":" java.lang.Object","doc816":" public <U> U reduceKeys(long parallelismThreshold,","doc23":" Constr |","doc813":" Since:","doc22":" Field |","doc814":" 1.8","doc25":"compact1, compact2, compact3","doc811":" Returns:","doc24":" Method","doc812":" the result of accumulating all keys using the given reducer to combine values, or null if none","doc820":" Type Parameters:","doc821":" U - the return type of the transformer","doc19":" Constr |","doc10":"Standard Ed. 8","doc808":" Parameters:","doc809":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc16":" Summary:","doc806":" BiFunction<? super K,? super K,? extends K> reducer)","doc15":" All Classes","doc807":" Returns the result of accumulating all keys using the given reducer to combine values, or null if none.","doc18":" Field |","doc804":" reduceKeys","doc17":" Nested |","doc805":" public K reduceKeys(long parallelismThreshold,","doc12":" Next Class","doc802":" Since:","doc11":" Prev Class","doc803":" 1.8","doc14":" No Frames","doc800":" Returns:","doc13":" Frames","doc801":" a non-null result from applying the given search function on each key, or null if none","doc810":" reducer - a commutative associative combining function","doc239":" Parameters:","doc248":" float loadFactor,","doc249":" int concurrencyLevel)","doc246":" ConcurrentHashMap","doc488":" NullPointerException - if any of the arguments are null","doc247":" public ConcurrentHashMap(int initialCapacity,","doc489":" replace","doc244":" Since:","doc486":" true if the value was replaced","doc245":" 1.6","doc487":" Throws:","doc242":" Throws:","doc484":" newValue - value to be associated with the specified key","doc243":" IllegalArgumentException - if the initial capacity of elements is negative or the load factor is nonpositive","doc485":" Returns:","doc240":" initialCapacity - the initial capacity. The implementation performs internal sizing to accommodate this many elements, given the specified load factor.","doc482":" key - key with which the specified value is associated","doc241":" loadFactor - the load factor (table density) for establishing the initial table size","doc483":" oldValue - value expected to be associated with the specified key","doc480":" replace in interface Map<K,V>","doc481":" Parameters:","doc228":" Throws:","doc229":" IllegalArgumentException - if the initial capacity of elements is negative","doc237":" float loadFactor)","doc479":" Specified by:","doc238":" Creates a new, empty map with an initial table size based on the given number of elements (initialCapacity) and initial table density (loadFactor).","doc477":" Specified by:","doc235":" ConcurrentHashMap","doc478":" replace in interface ConcurrentMap<K,V>","doc236":" public ConcurrentHashMap(int initialCapacity,","doc475":" return false;","doc233":" Parameters:","doc476":" except that the action is performed atomically.","doc234":" m - the map","doc473":" return true;","doc231":" public ConcurrentHashMap(Map<? extends K,? extends V> m)","doc474":" } else","doc232":" Creates a new map with the same mappings as the given map.","doc471":" if (map.containsKey(key) && Objects.equals(map.get(key), oldValue)) {","doc472":" map.put(key, newValue);","doc230":" ConcurrentHashMap","doc470":" Replaces the entry for a key only if currently mapped to a given value. This is equivalent to","doc219":" Constructor Detail","doc217":" Methods inherited from class java.lang.Object","doc459":" Parameters:","doc218":" finalize, getClass, notify, notifyAll, wait, wait, wait","doc468":" V oldValue,","doc226":" Parameters:","doc227":" initialCapacity - The implementation performs internal sizing to accommodate this many elements.","doc469":" V newValue)","doc466":" replace","doc224":" public ConcurrentHashMap(int initialCapacity)","doc467":" public boolean replace(K key,","doc225":" Creates a new, empty map with an initial table size accommodating the specified number of elements without the need to dynamically resize.","doc464":" Throws:","doc222":" Creates a new, empty map with the default initial table size (16).","doc465":" NullPointerException - if the specified key is null","doc223":" ConcurrentHashMap","doc462":" Returns:","doc220":" ConcurrentHashMap","doc463":" true if the value was removed","doc221":" public ConcurrentHashMap()","doc460":" key - key with which the specified value is associated","doc461":" value - value expected to be associated with the specified key","doc208":" Returns a non-null result from applying the given search function on each value, or null if none.","doc209":" int \tsize()","doc448":" Removes the entry for a key only if currently mapped to a given value. This is equivalent to","doc206":" Returns a non-null result from applying the given search function on each key, or null if none.","doc207":" <U> U \tsearchValues(long parallelismThreshold, Function<? super V,? extends U> searchFunction)","doc449":" if (map.containsKey(key) && Objects.equals(map.get(key), value)) {","doc457":" Specified by:","doc215":" Methods inherited from class java.util.AbstractMap","doc699":" Returns a non-null result from applying the given search function on each (key, value), or null if none. Upon success, further element processing is suppressed and the results of any other parallel invocations of the search function are ignored.","doc458":" remove in interface Map<K,V>","doc216":" clone","doc455":" Specified by:","doc213":" Collection<V> \tvalues()","doc697":" public <U> U search(long parallelismThreshold,","doc456":" remove in interface ConcurrentMap<K,V>","doc214":" Returns a Collection view of the values contained in this map.","doc698":" BiFunction<? super K,? super V,? extends U> searchFunction)","doc453":" return false;","doc211":" String \ttoString()","doc695":" 1.8","doc454":" except that the action is performed atomically.","doc212":" Returns a string representation of this map.","doc696":" search","doc451":" return true;","doc693":" action - the action","doc452":" } else","doc210":" Returns the number of key-value mappings in this map.","doc694":" Since:","doc691":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc450":" map.remove(key);","doc692":" transformer - a function returning the transformation for an element, or null if there is no transformation (in which case the action is not applied)","doc690":" Parameters:","doc439":" key - key with which the specified value is to be associated","doc437":" putIfAbsent in interface Map<K,V>","doc679":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc438":" Parameters:","doc446":" public boolean remove(Object key,","doc204":" Returns a non-null result from applying the given search function on each entry, or null if none.","doc688":" Type Parameters:","doc447":" Object value)","doc205":" <U> U \tsearchKeys(long parallelismThreshold, Function<? super K,? extends U> searchFunction)","doc689":" U - the return type of the transformer","doc444":" NullPointerException - if the specified key or value is null","doc202":" Returns a non-null result from applying the given search function on each (key, value), or null if none.","doc686":" Consumer<? super U> action)","doc445":" remove","doc203":" <U> U \tsearchEntries(long parallelismThreshold, Function<Map.Entry<K,V>,? extends U> searchFunction)","doc687":" Performs the given action for each non-null transformation of each (key, value).","doc442":" the previous value associated with the specified key, or null if there was no mapping for the key","doc200":" Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.","doc684":" public <U> void forEach(long parallelismThreshold,","doc443":" Throws:","doc201":" <U> U \tsearch(long parallelismThreshold, BiFunction<? super K,? super V,? extends U> searchFunction)","doc685":" BiFunction<? super K,? super V,? extends U> transformer,","doc440":" value - value to be associated with the specified key","doc682":" 1.8","doc441":" Returns:","doc683":" forEach","doc680":" action - the action","doc681":" Since:","doc428":" If the specified key is not already associated with a value, associate it with the given value. This is equivalent to","doc429":" if (!map.containsKey(key))","doc426":" public V putIfAbsent(K key,","doc668":" Parameters:","doc427":" V value)","doc669":" mappedValue - the mapped value to use for any additions","doc435":" putIfAbsent in interface ConcurrentMap<K,V>","doc677":" Performs the given action for each (key, value).","doc436":" Specified by:","doc678":" Parameters:","doc433":" except that the action is performed atomically.","doc675":" public void forEach(long parallelismThreshold,","doc434":" Specified by:","doc676":" BiConsumer<? super K,? super V> action)","doc431":" else","doc673":" NullPointerException - if the mappedValue is null","doc432":" return map.get(key);","doc674":" forEach","doc671":" the set view","doc430":" return map.put(key, value);","doc672":" Throws:","doc670":" Returns:","doc419":" Parameters:","doc417":" Overrides:","doc659":" Returns:","doc418":" equals in class AbstractMap<K,V>","doc415":" Specified by:","doc657":" Parameters:","doc899":" Function<? super V,? extends U> searchFunction)","doc416":" equals in interface Map<K,V>","doc658":" initialCapacity - The implementation performs internal sizing to accommodate this many elements.","doc424":" Object.hashCode(), HashMap","doc7":" Index","doc666":" public ConcurrentHashMap.KeySetView<K,V> keySet(V mappedValue)","doc425":" putIfAbsent","doc6":" Deprecated","doc667":" Returns a Set view of the keys in this map, using the given common mapped value for any additions (i.e., Collection.add(E) and Collection.addAll(Collection)). This is of course only appropriate if it is acceptable to use the same value for all additions from this view.","doc422":" true if the specified object is equal to this map","doc5":" Tree","doc664":" 1.8","doc423":" See Also:","doc4":" Use","doc665":" keySet","doc420":" o - object to be compared for equality with this map","doc3":" Class","doc662":" IllegalArgumentException - if the initial capacity of elements is negative","doc421":" Returns:","doc2":" Package","doc663":" Since:","doc1":" Overview","doc660":" the new set","doc0":"Skip navigation links","doc661":" Throws:","doc408":" Overrides:","doc409":" toString in class AbstractMap<K,V>","doc406":" public String toString()","doc648":" Returns:","doc407":" Returns a string representation of this map. The string representation consists of a list of key-value mappings (in no particular order) enclosed in braces (\"{}\"). Adjacent mappings are separated by the characters \", \" (comma and space). Each key-value mapping is rendered as the key followed by an equals sign (\"=\") followed by the associated value.","doc649":" the new set","doc646":" Type Parameters:","doc404":" Map.Entry.hashCode(), Object.equals(Object), Set.equals(Object)","doc888":" Performs the given action for each non-null transformation of each value.","doc405":" toString","doc647":" K - the element type of the returned set","doc889":" Type Parameters:","doc413":" public boolean equals(Object o)","doc655":" Type Parameters:","doc897":" searchValues","doc414":" Compares the specified object with this map for equality. Returns true if the given object is a map with the same mappings as this map. This operation may return misleading results if either map is concurrently modified during execution of this method.","doc656":" K - the element type of the returned set","doc898":" public <U> U searchValues(long parallelismThreshold,","doc411":" a string representation of this map","doc653":" public static <K> ConcurrentHashMap.KeySetView<K,Boolean> newKeySet(int initialCapacity)","doc895":" Since:","doc412":" equals","doc654":" Creates a new Set backed by a ConcurrentHashMap from the given type to Boolean.TRUE.","doc896":" 1.8","doc651":" 1.8","doc893":" transformer - a function returning the transformation for an element, or null if there is no transformation (in which case the action is not applied)","doc410":" Returns:","doc652":" newKeySet","doc894":" action - the action","doc891":" Parameters:","doc650":" Since:","doc892":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc890":" U - the return type of the transformer","doc9":"Java™ Platform","doc8":" Help","doc299":" Returns:","doc297":" Parameters:","doc298":" key - possible key","doc295":" Overrides:","doc296":" containsKey in class AbstractMap<K,V>","doc293":" Specified by:","doc294":" containsKey in interface Map<K,V>","doc291":" public boolean containsKey(Object key)","doc292":" Tests if the specified object is a key in this table.","doc290":" containsKey","doc288":" Throws:","doc289":" NullPointerException - if the specified key is null","doc286":" Returns:","doc287":" the value to which the specified key is mapped, or null if this map contains no mapping for the key","doc284":" Parameters:","doc285":" key - the key whose associated value is to be returned","doc282":" Overrides:","doc283":" get in class AbstractMap<K,V>","doc280":" Specified by:","doc281":" get in interface Map<K,V>","doc279":" More formally, if this map contains a mapping from a key k to a value v such that key.equals(k), then this method returns v; otherwise it returns null. (There can be at most one such mapping.)","doc277":" public V get(Object key)","doc278":" Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.","doc275":" true if this map contains no key-value mappings","doc276":" get","doc273":" isEmpty in class AbstractMap<K,V>","doc274":" Returns:","doc271":" isEmpty in interface Map<K,V>","doc272":" Overrides:","doc270":" Specified by:","doc268":" public boolean isEmpty()","doc269":" Returns true if this map contains no key-value mappings.","doc266":" the number of key-value mappings in this map","doc267":" isEmpty","doc264":" size in class AbstractMap<K,V>","doc265":" Returns:","doc262":" size in interface Map<K,V>","doc263":" Overrides:","doc260":" Returns the number of key-value mappings in this map. If the map contains more than Integer.MAX_VALUE elements, returns Integer.MAX_VALUE.","doc261":" Specified by:","doc259":" public int size()","doc257":" Method Detail","doc499":" replace in interface ConcurrentMap<K,V>","doc258":" size","doc255":" Throws:","doc497":" except that the action is performed atomically.","doc256":" IllegalArgumentException - if the initial capacity is negative or the load factor or concurrencyLevel are nonpositive","doc498":" Specified by:","doc253":" loadFactor - the load factor (table density) for establishing the initial table size","doc495":" } else","doc254":" concurrencyLevel - the estimated number of concurrently updating threads. The implementation may use this value as a sizing hint.","doc496":" return null;","doc251":" Parameters:","doc493":" if (map.containsKey(key)) {","doc252":" initialCapacity - the initial capacity. The implementation performs internal sizing to accommodate this many elements, given the specified load factor.","doc494":" return map.put(key, value);","doc491":" V value)","doc250":" Creates a new, empty map with an initial table size based on the given number of elements (initialCapacity), table density (loadFactor), and number of concurrently updating threads (concurrencyLevel).","doc492":" Replaces the entry for a key only if currently mapped to some value. This is equivalent to","doc490":" public V replace(K key,","doc918":" the result of accumulating all values","doc919":" Since:","doc916":" reducer - a commutative associative combining function","doc917":" Returns:","doc914":" Parameters:","doc915":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc912":" BiFunction<? super V,? super V,? extends V> reducer)","doc913":" Returns the result of accumulating all values using the given reducer to combine values, or null if none.","doc910":" reduceValues","doc911":" public V reduceValues(long parallelismThreshold,","doc920":" 1.8","doc909":" 1.8","doc907":" a non-null result from applying the given search function on each value, or null if none","doc908":" Since:","doc905":" searchFunction - a function returning a non-null result on success, else null","doc906":" Returns:","doc903":" Parameters:","doc904":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc901":" Type Parameters:","doc902":" U - the return type of the search function","doc900":" Returns a non-null result from applying the given search function on each value, or null if none. Upon success, further element processing is suppressed and the results of any other parallel invocations of the search function are ignored.","doc85":" Method Summary","doc84":" Creates a new map with the same mappings as the given map.","doc87":" void \tclear()","doc86":" All MethodsStatic MethodsInstance MethodsConcrete Methods Modifier and Type \tMethod and Description","doc81":" ConcurrentHashMap(int initialCapacity, float loadFactor, int concurrencyLevel)","doc80":" Creates a new, empty map with an initial table size based on the given number of elements (initialCapacity) and initial table density (loadFactor).","doc83":" ConcurrentHashMap(Map<? extends K,? extends V> m)","doc82":" Creates a new, empty map with an initial table size based on the given number of elements (initialCapacity), table density (loadFactor), and number of concurrently updating threads (concurrencyLevel).","doc89":" V \tcompute(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)","doc88":" Removes all of the mappings from this map.","doc74":" Constructors Constructor and Description","doc73":" Constructor Summary","doc76":" Creates a new, empty map with the default initial table size (16).","doc75":" ConcurrentHashMap()","doc70":" AbstractMap.SimpleEntry<K,V>, AbstractMap.SimpleImmutableEntry<K,V>","doc72":" Map.Entry<K,V>","doc71":" Nested classes\/interfaces inherited from interface java.util.Map","doc78":" Creates a new, empty map with an initial table size accommodating the specified number of elements without the need to dynamically resize.","doc77":" ConcurrentHashMap(int initialCapacity)","doc79":" ConcurrentHashMap(int initialCapacity, float loadFactor)","doc96":" Legacy method testing if some key maps into the specified value in this table.","doc95":" boolean \tcontains(Object value)","doc98":" Tests if the specified object is a key in this table.","doc97":" boolean \tcontainsKey(Object key)","doc92":" If the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless null.","doc91":" V \tcomputeIfAbsent(K key, Function<? super K,? extends V> mappingFunction)","doc94":" If the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value.","doc93":" V \tcomputeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)","doc99":" boolean \tcontainsValue(Object value)","doc90":" Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).","doc518":" key - the key whose associated value is to be returned","doc519":" defaultValue - the value to return if this map contains no mapping for the given key","doc516":" getOrDefault in interface Map<K,V>","doc758":" IntBinaryOperator reducer)","doc517":" Parameters:","doc759":" Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.","doc514":" getOrDefault in interface ConcurrentMap<K,V>","doc756":" ToIntBiFunction<? super K,? super V> transformer,","doc998":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc515":" Specified by:","doc757":" int basis,","doc999":" transformer - a function returning the transformation for an element, or null if there is no transformation (in which case the action is not applied)","doc523":" NullPointerException - if the specified key is null","doc765":" Returns:","doc524":" forEach","doc766":" the result of accumulating the given transformation of all (key, value) pairs","doc521":" the mapping for the key, if present; else the default value","doc763":" basis - the identity (initial default value) for the reduction","doc522":" Throws:","doc764":" reducer - a commutative associative combining function","doc761":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc520":" Returns:","doc762":" transformer - a function returning the transformation for an element","doc760":" Parameters:","doc509":" getOrDefault","doc507":" Throws:","doc749":" reducer - a commutative associative combining function","doc508":" NullPointerException - if the specified key or value is null","doc505":" Returns:","doc747":" transformer - a function returning the transformation for an element","doc989":" 1.8","doc506":" the previous value associated with the specified key, or null if there was no mapping for the key","doc748":" basis - the identity (initial default value) for the reduction","doc503":" key - key with which the specified value is associated","doc745":" Parameters:","doc987":" action - the action","doc504":" value - value to be associated with the specified key","doc746":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc988":" Since:","doc512":" Returns the value to which the specified key is mapped, or the given default value if this map contains no mapping for the key.","doc754":" reduceToInt","doc996":" U - the return type of the transformer","doc513":" Specified by:","doc755":" public int reduceToInt(long parallelismThreshold,","doc997":" Parameters:","doc510":" public V getOrDefault(Object key,","doc752":" Since:","doc994":" Performs the given action for each non-null transformation of each entry.","doc511":" V defaultValue)","doc753":" 1.8","doc995":" Type Parameters:","doc750":" Returns:","doc992":" Function<Map.Entry<K,V>,? extends U> transformer,","doc751":" the result of accumulating the given transformation of all (key, value) pairs","doc993":" Consumer<? super U> action)","doc990":" forEachEntry","doc991":" public <U> void forEachEntry(long parallelismThreshold,","doc738":" 1.8","doc739":" reduceToLong","doc736":" the result of accumulating the given transformation of all (key, value) pairs","doc978":" the result of accumulating the given transformation of all values","doc737":" Since:","doc979":" Since:","doc734":" reducer - a commutative associative combining function","doc976":" reducer - a commutative associative combining function","doc735":" Returns:","doc977":" Returns:","doc501":" replace in interface Map<K,V>","doc743":" LongBinaryOperator reducer)","doc985":" Parameters:","doc502":" Parameters:","doc744":" Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.","doc986":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc741":" ToLongBiFunction<? super K,? super V> transformer,","doc983":" Consumer<? super Map.Entry<K,V>> action)","doc500":" Specified by:","doc742":" long basis,","doc984":" Performs the given action for each entry.","doc981":" forEachEntry","doc740":" public long reduceToLong(long parallelismThreshold,","doc982":" public void forEachEntry(long parallelismThreshold,","doc980":" 1.8","doc729":" Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.","doc727":" double basis,","doc969":" int basis,","doc728":" DoubleBinaryOperator reducer)","doc725":" public double reduceToDouble(long parallelismThreshold,","doc967":" public int reduceValuesToInt(long parallelismThreshold,","doc726":" ToDoubleBiFunction<? super K,? super V> transformer,","doc968":" ToIntFunction<? super V> transformer,","doc723":" 1.8","doc965":" 1.8","doc724":" reduceToDouble","doc966":" reduceValuesToInt","doc732":" transformer - a function returning the transformation for an element","doc974":" transformer - a function returning the transformation for an element","doc733":" basis - the identity (initial default value) for the reduction","doc975":" basis - the identity (initial default value) for the reduction","doc730":" Parameters:","doc972":" Parameters:","doc731":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc973":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc970":" IntBinaryOperator reducer)","doc971":" Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.","doc718":" transformer - a function returning the transformation for an element, or null if there is no transformation (in which case it is not combined)","doc719":" reducer - a commutative associative combining function","doc716":" Parameters:","doc958":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc717":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc959":" transformer - a function returning the transformation for an element","doc714":" Type Parameters:","doc956":" Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.","doc715":" U - the return type of the transformer","doc957":" Parameters:","doc712":" BiFunction<? super U,? super U,? extends U> reducer)","doc954":" long basis,","doc713":" Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, or null if none.","doc955":" LongBinaryOperator reducer)","doc721":" the result of accumulating the given transformation of all (key, value) pairs","doc963":" the result of accumulating the given transformation of all values","doc722":" Since:","doc964":" Since:","doc961":" reducer - a commutative associative combining function","doc720":" Returns:","doc962":" Returns:","doc960":" basis - the identity (initial default value) for the reduction","doc709":" reduce","doc707":" Since:","doc949":" Since:","doc708":" 1.8","doc705":" Returns:","doc947":" Returns:","doc706":" a non-null result from applying the given search function on each (key, value), or null if none","doc948":" the result of accumulating the given transformation of all values","doc703":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc945":" basis - the identity (initial default value) for the reduction","doc704":" searchFunction - a function returning a non-null result on success, else null","doc946":" reducer - a commutative associative combining function","doc701":" U - the return type of the search function","doc943":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc702":" Parameters:","doc944":" transformer - a function returning the transformation for an element","doc710":" public <U> U reduce(long parallelismThreshold,","doc952":" public long reduceValuesToLong(long parallelismThreshold,","doc711":" BiFunction<? super K,? super V,? extends U> transformer,","doc953":" ToLongFunction<? super V> transformer,","doc950":" 1.8","doc951":" reduceValuesToLong","doc938":" ToDoubleFunction<? super V> transformer,","doc939":" double basis,","doc936":" reduceValuesToDouble","doc937":" public double reduceValuesToDouble(long parallelismThreshold,","doc934":" Since:","doc935":" 1.8","doc932":" Returns:","doc933":" the result of accumulating the given transformation of all values","doc941":" Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.","doc700":" Type Parameters:","doc942":" Parameters:","doc940":" DoubleBinaryOperator reducer)","doc929":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc927":" U - the return type of the transformer","doc928":" Parameters:","doc925":" Returns the result of accumulating the given transformation of all values using the given reducer to combine values, or null if none.","doc926":" Type Parameters:","doc923":" Function<? super V,? extends U> transformer,","doc924":" BiFunction<? super U,? super U,? extends U> reducer)","doc921":" reduceValues","doc922":" public <U> U reduceValues(long parallelismThreshold,","doc930":" transformer - a function returning the transformation for an element, or null if there is no transformation (in which case it is not combined)","doc931":" reducer - a commutative associative combining function","doc118":" Performs the given action for each key.","doc119":" <U> void \tforEachKey(long parallelismThreshold, Function<? super K,? extends U> transformer, Consumer<? super U> action)","doc127":" V \tgetOrDefault(Object key, V defaultValue)","doc369":" keySet in class AbstractMap<K,V>","doc128":" Returns the value to which the specified key is mapped, or the given default value if this map contains no mapping for the key.","doc367":" keySet in interface Map<K,V>","doc125":" V \tget(Object key)","doc368":" Overrides:","doc126":" Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.","doc365":" The view's spliterator reports Spliterator.CONCURRENT, Spliterator.DISTINCT, and Spliterator.NONNULL.","doc123":" <U> void \tforEachValue(long parallelismThreshold, Function<? super V,? extends U> transformer, Consumer<? super U> action)","doc1033":" U - the return type of the transformer","doc366":" Specified by:","doc124":" Performs the given action for each non-null transformation of each value.","doc1032":" Type Parameters:","doc363":" Returns a Set view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. The set supports element removal, which removes the corresponding mapping from this map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations.","doc121":" void \tforEachValue(long parallelismThreshold, Consumer<? super V> action)","doc1031":" Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, or null if none.","doc364":" The view's iterators and spliterators are weakly consistent.","doc122":" Performs the given action for each value.","doc1030":" BiFunction<? super U,? super U,? extends U> reducer)","doc361":" keySet","doc1037":" reducer - a commutative associative combining function","doc362":" public ConcurrentHashMap.KeySetView<K,V> keySet()","doc120":" Performs the given action for each non-null transformation of each key.","doc1036":" transformer - a function returning the transformation for an element, or null if there is no transformation (in which case it is not combined)","doc1035":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc360":" clear in class AbstractMap<K,V>","doc1034":" Parameters:","doc1039":" the result of accumulating the given transformation of all entries","doc1038":" Returns:","doc109":" void \tforEach(long parallelismThreshold, BiConsumer<? super K,? super V> action)","doc107":" void \tforEach(BiConsumer<? super K,? super V> action)","doc349":" key - the key that needs to be removed","doc108":" Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.","doc358":" clear in interface Map<K,V>","doc116":" Performs the given action for each non-null transformation of each entry.","doc117":" void \tforEachKey(long parallelismThreshold, Consumer<? super K> action)","doc359":" Overrides:","doc356":" Removes all of the mappings from this map.","doc114":" Performs the given action for each entry.","doc598":" BiFunction<? super V,? super V,? extends V> remappingFunction)","doc357":" Specified by:","doc115":" <U> void \tforEachEntry(long parallelismThreshold, Function<Map.Entry<K,V>,? extends U> transformer, Consumer<? super U> action)","doc599":" If the specified key is not already associated with a (non-null) value, associates it with the given value. Otherwise, replaces the value with the results of the given remapping function, or removes if null. The entire method invocation is performed atomically. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this Map.","doc354":" clear","doc112":" Performs the given action for each non-null transformation of each (key, value).","doc596":" public V merge(K key,","doc1022":" reducer - a commutative associative combining function","doc355":" public void clear()","doc113":" void \tforEachEntry(long parallelismThreshold, Consumer<? super Map.Entry<K,V>> action)","doc597":" V value,","doc1021":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc352":" Throws:","doc110":" Performs the given action for each (key, value).","doc594":" RuntimeException - or Error if the remappingFunction does so, in which case the mapping is unchanged","doc1020":" Parameters:","doc353":" NullPointerException - if the specified key is null","doc111":" <U> void \tforEach(long parallelismThreshold, BiFunction<? super K,? super V,? extends U> transformer, Consumer<? super U> action)","doc595":" merge","doc350":" Returns:","doc592":" NullPointerException - if the specified key or remappingFunction is null","doc1026":" 1.8","doc351":" the previous value associated with key, or null if there was no mapping for key","doc593":" IllegalStateException - if the computation detectably attempts a recursive update to this map that would otherwise never complete","doc1025":" Since:","doc590":" the new value associated with the specified key, or null if none","doc1024":" the result of accumulating all entries","doc591":" Throws:","doc1023":" Returns:","doc1029":" Function<Map.Entry<K,V>,? extends U> transformer,","doc1028":" public <U> U reduceEntries(long parallelismThreshold,","doc1027":" reduceEntries","doc1009":" Parameters:","doc338":" putAll in class AbstractMap<K,V>","doc339":" Parameters:","doc347":" remove in class AbstractMap<K,V>","doc105":" boolean \tequals(Object o)","doc589":" Returns:","doc348":" Parameters:","doc106":" Compares the specified object with this map for equality.","doc345":" remove in interface Map<K,V>","doc103":" Set<Map.Entry<K,V>> \tentrySet()","doc587":" key - key with which the specified value is to be associated","doc346":" Overrides:","doc104":" Returns a Set view of the mappings contained in this map.","doc588":" remappingFunction - the function to compute a value","doc343":" Removes the key (and its corresponding value) from this map. This method does nothing if the key is not in the map.","doc101":" Enumeration<V> \telements()","doc585":" compute in interface Map<K,V>","doc1011":" searchFunction - a function returning a non-null result on success, else null","doc344":" Specified by:","doc102":" Returns an enumeration of the values in this table.","doc586":" Parameters:","doc1010":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc341":" remove","doc583":" compute in interface ConcurrentMap<K,V>","doc342":" public V remove(Object key)","doc100":" Returns true if this map maps one or more keys to the specified value.","doc584":" Specified by:","doc581":" Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping). The entire method invocation is performed atomically. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this Map.","doc1015":" 1.8","doc340":" m - mappings to be stored in this map","doc582":" Specified by:","doc1014":" Since:","doc1013":" a non-null result from applying the given search function on each entry, or null if none","doc580":" BiFunction<? super K,? super V,? extends V> remappingFunction)","doc1012":" Returns:","doc1019":" Returns the result of accumulating all entries using the given reducer to combine values, or null if none.","doc1018":" BiFunction<Map.Entry<K,V>,Map.Entry<K,V>,? extends Map.Entry<K,V>> reducer)","doc1017":" public Map.Entry<K,V> reduceEntries(long parallelismThreshold,","doc1016":" reduceEntries","doc329":" the previous value associated with key, or null if there was no mapping for key","doc327":" value - value to be associated with the specified key","doc569":" Parameters:","doc328":" Returns:","doc578":" compute","doc336":" putAll in interface Map<K,V>","doc337":" Overrides:","doc579":" public V compute(K key,","doc576":" IllegalStateException - if the computation detectably attempts a recursive update to this map that would otherwise never complete","doc334":" Copies all of the mappings from the specified map to this one. These mappings replace any mappings that this map had for any of the keys currently in the specified map.","doc577":" RuntimeException - or Error if the remappingFunction does so, in which case the mapping is unchanged","doc335":" Specified by:","doc574":" Throws:","doc332":" putAll","doc1000":" action - the action","doc575":" NullPointerException - if the specified key or remappingFunction is null","doc333":" public void putAll(Map<? extends K,? extends V> m)","doc572":" Returns:","doc330":" Throws:","doc573":" the new value associated with the specified key, or null if none","doc331":" NullPointerException - if the specified key or value is null","doc570":" key - key with which a value may be associated","doc1004":" public <U> U searchEntries(long parallelismThreshold,","doc571":" remappingFunction - the function to compute a value","doc1003":" searchEntries","doc1002":" 1.8","doc1001":" Since:","doc1008":" U - the return type of the search function","doc1007":" Type Parameters:","doc1006":" Returns a non-null result from applying the given search function on each entry, or null if none. Upon success, further element processing is suppressed and the results of any other parallel invocations of the search function are ignored.","doc1005":" Function<Map.Entry<K,V>,? extends U> searchFunction)","doc318":" V value)","doc319":" Maps the specified key to the specified value in this table. Neither the key nor the value can be null.","doc558":" NullPointerException - if the specified key or mappingFunction is null","doc316":" put","doc317":" public V put(K key,","doc559":" IllegalStateException - if the computation detectably attempts a recursive update to this map that would otherwise never complete","doc567":" Specified by:","doc325":" Parameters:","doc568":" computeIfPresent in interface Map<K,V>","doc326":" key - key with which the specified value is to be associated","doc565":" Specified by:","doc323":" Overrides:","doc566":" computeIfPresent in interface ConcurrentMap<K,V>","doc324":" put in class AbstractMap<K,V>","doc563":" BiFunction<? super K,? super V,? extends V> remappingFunction)","doc321":" Specified by:","doc564":" If the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value. The entire method invocation is performed atomically. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this map.","doc322":" put in interface Map<K,V>","doc561":" computeIfPresent","doc562":" public V computeIfPresent(K key,","doc320":" The value can be retrieved by calling the get method with a key that is equal to the original key.","doc560":" RuntimeException - or Error if the mappingFunction does so, in which case the mapping is left unestablished","doc309":" containsValue in class AbstractMap<K,V>","doc307":" containsValue in interface Map<K,V>","doc549":" computeIfAbsent in interface ConcurrentMap<K,V>","doc308":" Overrides:","doc547":" If the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless null. The entire method invocation is performed atomically, so the function is applied at most once per key. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this map.","doc305":" Returns true if this map maps one or more keys to the specified value. Note: This method may require a full traversal of the map, and is much slower than method containsKey.","doc789":" Since:","doc548":" Specified by:","doc306":" Specified by:","doc556":" the current (existing or computed) value associated with the specified key, or null if the computed value is null","doc314":" Throws:","doc798":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc557":" Throws:","doc315":" NullPointerException - if the specified value is null","doc799":" searchFunction - a function returning a non-null result on success, else null","doc554":" mappingFunction - the function to compute a value","doc312":" Returns:","doc796":" U - the return type of the search function","doc555":" Returns:","doc313":" true if this map maps one or more keys to the specified value","doc797":" Parameters:","doc552":" Parameters:","doc310":" Parameters:","doc794":" Returns a non-null result from applying the given search function on each key, or null if none. Upon success, further element processing is suppressed and the results of any other parallel invocations of the search function are ignored.","doc553":" key - key with which the specified value is to be associated","doc311":" value - value whose presence in this map is to be tested","doc795":" Type Parameters:","doc550":" Specified by:","doc792":" public <U> U searchKeys(long parallelismThreshold,","doc551":" computeIfAbsent in interface Map<K,V>","doc793":" Function<? super K,? extends U> searchFunction)","doc790":" 1.8","doc791":" searchKeys","doc538":" Specified by:","doc539":" replaceAll in interface ConcurrentMap<K,V>","doc536":" Description copied from interface: ConcurrentMap","doc778":" forEachKey","doc537":" Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception. Exceptions thrown by the function are relayed to the caller.","doc779":" public <U> void forEachKey(long parallelismThreshold,","doc545":" public V computeIfAbsent(K key,","doc303":" containsValue","doc787":" transformer - a function returning the transformation for an element, or null if there is no transformation (in which case the action is not applied)","doc546":" Function<? super K,? extends V> mappingFunction)","doc304":" public boolean containsValue(Object value)","doc788":" action - the action","doc543":" function - the function to apply to each entry","doc301":" Throws:","doc785":" Parameters:","doc544":" computeIfAbsent","doc302":" NullPointerException - if the specified key is null","doc786":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc541":" replaceAll in interface Map<K,V>","doc783":" Type Parameters:","doc542":" Parameters:","doc300":" true if and only if the specified object is a key in this table, as determined by the equals method; false otherwise","doc784":" U - the return type of the transformer","doc781":" Consumer<? super U> action)","doc540":" Specified by:","doc782":" Performs the given action for each non-null transformation of each key.","doc780":" Function<? super K,? extends U> transformer,","doc529":" forEach in interface ConcurrentMap<K,V>","doc527":" Performs the given action for each entry in this map until all entries have been processed or the action throws an exception. Unless otherwise specified by the implementing class, actions are performed in the order of entry set iteration (if an iteration order is specified.) Exceptions thrown by the action are relayed to the caller.","doc769":" forEachKey","doc528":" Specified by:","doc525":" public void forEach(BiConsumer<? super K,? super V> action)","doc767":" Since:","doc526":" Description copied from interface: ConcurrentMap","doc768":" 1.8","doc534":" replaceAll","doc776":" Since:","doc535":" public void replaceAll(BiFunction<? super K,? super V,? extends V> function)","doc777":" 1.8","doc532":" Parameters:","doc774":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc533":" action - The action to be performed for each entry","doc775":" action - the action","doc530":" Specified by:","doc772":" Performs the given action for each key.","doc531":" forEach in interface Map<K,V>","doc773":" Parameters:","doc770":" public void forEachKey(long parallelismThreshold,","doc771":" Consumer<? super K> action)","doc198":" Replaces the entry for a key only if currently mapped to a given value.","doc199":" void \treplaceAll(BiFunction<? super K,? super V,? extends V> function)","doc196":" Replaces the entry for a key only if currently mapped to some value.","doc197":" boolean \treplace(K key, V oldValue, V newValue)","doc194":" Removes the entry for a key only if currently mapped to a given value.","doc195":" V \treplace(K key, V value)","doc192":" Removes the key (and its corresponding value) from this map.","doc193":" boolean \tremove(Object key, Object value)","doc190":" Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.","doc191":" V \tremove(Object key)","doc189":" long \treduceValuesToLong(long parallelismThreshold, ToLongFunction<? super V> transformer, long basis, LongBinaryOperator reducer)","doc187":" int \treduceValuesToInt(long parallelismThreshold, ToIntFunction<? super V> transformer, int basis, IntBinaryOperator reducer)","doc188":" Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.","doc185":" double \treduceValuesToDouble(long parallelismThreshold, ToDoubleFunction<? super V> transformer, double basis, DoubleBinaryOperator reducer)","doc186":" Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.","doc183":" <U> U \treduceValues(long parallelismThreshold, Function<? super V,? extends U> transformer, BiFunction<? super U,? super U,? extends U> reducer)","doc184":" Returns the result of accumulating the given transformation of all values using the given reducer to combine values, or null if none.","doc181":" V \treduceValues(long parallelismThreshold, BiFunction<? super V,? super V,? extends V> reducer)","doc182":" Returns the result of accumulating all values using the given reducer to combine values, or null if none.","doc180":" Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.","doc1080":" transformer - a function returning the transformation for an element","doc1084":" the result of accumulating the given transformation of all entries","doc1083":" Returns:","doc1082":" reducer - a commutative associative combining function","doc1081":" basis - the identity (initial default value) for the reduction","doc178":" Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.","doc179":" long \treduceToLong(long parallelismThreshold, ToLongBiFunction<? super K,? super V> transformer, long basis, LongBinaryOperator reducer)","doc176":" Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.","doc1086":" 1.8","doc177":" int \treduceToInt(long parallelismThreshold, ToIntBiFunction<? super K,? super V> transformer, int basis, IntBinaryOperator reducer)","doc1085":" Since:","doc174":" Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.","doc175":" double \treduceToDouble(long parallelismThreshold, ToDoubleBiFunction<? super K,? super V> transformer, double basis, DoubleBinaryOperator reducer)","doc172":" Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.","doc173":" long \treduceKeysToLong(long parallelismThreshold, ToLongFunction<? super K> transformer, long basis, LongBinaryOperator reducer)","doc170":" Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.","doc171":" int \treduceKeysToInt(long parallelismThreshold, ToIntFunction<? super K> transformer, int basis, IntBinaryOperator reducer)","doc1073":" public int reduceEntriesToInt(long parallelismThreshold,","doc1072":" reduceEntriesToInt","doc169":" double \treduceKeysToDouble(long parallelismThreshold, ToDoubleFunction<? super K> transformer, double basis, DoubleBinaryOperator reducer)","doc1071":" 1.8","doc1070":" Since:","doc167":" <U> U \treduceKeys(long parallelismThreshold, Function<? super K,? extends U> transformer, BiFunction<? super U,? super U,? extends U> reducer)","doc1077":" Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.","doc168":" Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, or null if none.","doc1076":" IntBinaryOperator reducer)","doc165":" K \treduceKeys(long parallelismThreshold, BiFunction<? super K,? super K,? extends K> reducer)","doc1075":" int basis,","doc166":" Returns the result of accumulating all keys using the given reducer to combine values, or null if none.","doc1074":" ToIntFunction<Map.Entry<K,V>> transformer,","doc163":" long \treduceEntriesToLong(long parallelismThreshold, ToLongFunction<Map.Entry<K,V>> transformer, long basis, LongBinaryOperator reducer)","doc164":" Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.","doc161":" int \treduceEntriesToInt(long parallelismThreshold, ToIntFunction<Map.Entry<K,V>> transformer, int basis, IntBinaryOperator reducer)","doc1079":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc162":" Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.","doc1078":" Parameters:","doc160":" Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.","doc1062":" Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.","doc1061":" LongBinaryOperator reducer)","doc158":" Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, or null if none.","doc1060":" long basis,","doc159":" double \treduceEntriesToDouble(long parallelismThreshold, ToDoubleFunction<Map.Entry<K,V>> transformer, double basis, DoubleBinaryOperator reducer)","doc156":" Returns the result of accumulating all entries using the given reducer to combine values, or null if none.","doc398":" hashCode in interface Map<K,V>","doc1066":" basis - the identity (initial default value) for the reduction","doc157":" <U> U \treduceEntries(long parallelismThreshold, Function<Map.Entry<K,V>,? extends U> transformer, BiFunction<? super U,? super U,? extends U> reducer)","doc399":" Overrides:","doc1065":" transformer - a function returning the transformation for an element","doc154":" Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, or null if none.","doc396":" Returns the hash code value for this Map, i.e., the sum of, for each key-value pair in the map, key.hashCode() ^ value.hashCode().","doc1064":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel","doc155":" Map.Entry<K,V> \treduceEntries(long parallelismThreshold, BiFunction<Map.Entry<K,V>,Map.Entry<K,V>,? extends Map.Entry<K,V>> reducer)","doc397":" Specified by:","doc1063":" Parameters:","doc152":" If the specified key is not already associated with a value, associate it with the given value.","doc394":" hashCode","doc153":" <U> U \treduce(long parallelismThreshold, BiFunction<? super K,? super V,? extends U> transformer, BiFunction<? super U,? super U,? extends U> reducer)","doc395":" public int hashCode()","doc1069":" the result of accumulating the given transformation of all entries","doc150":" Copies all of the mappings from the specified map to this one.","doc392":" Returns:","doc1068":" Returns:","doc151":" V \tputIfAbsent(K key, V value)","doc393":" the set view","doc1067":" reducer - a commutative associative combining function","doc390":" Specified by:","doc391":" entrySet in class AbstractMap<K,V>","doc149":" void \tputAll(Map<? extends K,? extends V> m)","doc1051":" basis - the identity (initial default value) for the reduction","doc1050":" transformer - a function returning the transformation for an element","doc147":" V \tput(K key, V value)","doc389":" entrySet in interface Map<K,V>","doc148":" Maps the specified key to the specified value in this table.","doc145":" static <K> ConcurrentHashMap.KeySetView<K,Boolean> \tnewKeySet(int initialCapacity)","doc387":" The view's spliterator reports Spliterator.CONCURRENT, Spliterator.DISTINCT, and Spliterator.NONNULL.","doc1055":" Since:","doc146":" Creates a new Set backed by a ConcurrentHashMap from the given type to Boolean.TRUE.","doc388":" Specified by:","doc1054":" the result of accumulating the given transformation of all entries","doc143":" static <K> ConcurrentHashMap.KeySetView<K,Boolean> \tnewKeySet()","doc385":" Returns a Set view of the mappings contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations.","doc1053":" Returns:","doc144":" Creates a new Set backed by a ConcurrentHashMap from the given type to Boolean.TRUE.","doc386":" The view's iterators and spliterators are weakly consistent.","doc1052":" reducer - a commutative associative combining function","doc141":" V \tmerge(K key, V value, BiFunction<? super V,? super V,? extends V> remappingFunction)","doc383":" entrySet","doc1059":" ToLongFunction<Map.Entry<K,V>> transformer,","doc142":" If the specified key is not already associated with a (non-null) value, associates it with the given value.","doc384":" public Set<Map.Entry<K,V>> entrySet()","doc1058":" public long reduceEntriesToLong(long parallelismThreshold,","doc381":" Returns:","doc1057":" reduceEntriesToLong","doc140":" Returns the number of mappings.","doc382":" the collection view","doc1056":" 1.8","doc380":" values in class AbstractMap<K,V>","doc129":" int \thashCode()","doc138":" Returns a Set view of the keys in this map, using the given common mapped value for any additions (i.e., Collection.add(E) and Collection.addAll(Collection)).","doc1040":" Since:","doc139":" long \tmappingCount()","doc378":" values in interface Map<K,V>","doc136":" Returns a Set view of the keys contained in this map.","doc137":" ConcurrentHashMap.KeySetView<K,V> \tkeySet(V mappedValue)","doc379":" Overrides:","doc376":" The view's spliterator reports Spliterator.CONCURRENT and Spliterator.NONNULL.","doc134":" Returns an enumeration of the keys in this table.","doc1044":" ToDoubleFunction<Map.Entry<K,V>> transformer,","doc377":" Specified by:","doc135":" ConcurrentHashMap.KeySetView<K,V> \tkeySet()","doc1043":" public double reduceEntriesToDouble(long parallelismThreshold,","doc374":" Returns a Collection view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. The collection supports element removal, which removes the corresponding mapping from this map, via the Iterator.remove, Collection.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations.","doc132":" Returns true if this map contains no key-value mappings.","doc1042":" reduceEntriesToDouble","doc375":" The view's iterators and spliterators are weakly consistent.","doc133":" Enumeration<K> \tkeys()","doc1041":" 1.8","doc372":" values","doc130":" Returns the hash code value for this Map, i.e., the sum of, for each key-value pair in the map, key.hashCode() ^ value.hashCode().","doc1048":" Parameters:","doc373":" public Collection<V> values()","doc131":" boolean \tisEmpty()","doc1047":" Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.","doc370":" Returns:","doc1046":" DoubleBinaryOperator reducer)","doc371":" the set view","doc1045":" double basis,","doc1049":" parallelismThreshold - the (estimated) number of elements needed for this operation to be executed in parallel"},"lemmas":{}}